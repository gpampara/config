#+TITLE: Emacs Config
#+AUTHOR: Gary Pamparà
#+TOC: true

This is the my emacs config as an =org-mode= configuration. The idea
of using this literate style is to keep the config as organized as
possible.

* Configure package sources

#+begin_src emacs-lisp
    (when (eval-when-compile (version< emacs-version "27"))
      (load "~/.emacs.d/early-init.el"))

    (setq package-enable-at-startup nil)

    (setq package-archives
          '(("gnu" . "https://elpa.gnu.org/packages/")
            ("melpa" . "https://melpa.org/packages/")
            ("org" . "https://orgmode.org/elpa/")))
  ;;  (package-initialize)
#+end_src

# * Benchmark setup
# `benchmark-init` records the startup time by package so that we can
# debug problems. The package only records after it has been loaded, so
# we put it as early as possible.
#
# #+begin_src emacs-lisp
# (use-package benchmark-init
#   :config
#   ;; To disable collection of benchmark data after init is done.
#   (add-hook 'after-init-hook 'benchmark-init/deactivate))
#
# (add-hook 'after-init-hook
#   (lambda () (message "loaded in %s" (emacs-init-time))))
# #+end_src

* Bootstrap use-package

#+begin_src emacs-lisp
  (unless (package-installed-p 'use-package)
    (package-refresh-contents)
    (package-install 'use-package))

  (require 'use-package)
#+end_src

Always ensure that dependencies are downloaded

#+begin_src emacs-lisp
  (setq use-package-always-ensure t)
#+end_src

Define an auto-update schedule for packages

#+begin_src emacs-lisp
  (use-package auto-package-update
    :config
    (setq auto-package-update-delete-old-versions t
          auto-package-update-interval 7
          auto-package-update-prompt-before-update t)
    (auto-package-update-maybe))
#+end_src

#+begin_src emacs-lisp
  ;; (use-package use-package-ensure-system-package)
#+end_src

* Dependencies

#+begin_src emacs-lisp
  (use-package async)
  (use-package dash)
  (use-package f)
  (use-package hl-todo)
  (use-package s)
#+end_src

* Variables

#+begin_src emacs-lisp
  (setq inhibit-startup-screen t)  ; don't display the help screen
  (setq coding-system-for-read 'utf-8 )	; use utf-8 by default
  (setq coding-system-for-write 'utf-8 )
  (setq sentence-end-double-space nil)	; sentence SHOULD end with only a point.
  (setq require-final-newline t)  ; Ensure there is a final newline
  (setq confirm-kill-emacs 'y-or-n-p)  ; Confirm really quit emacs
  (defalias 'yes-or-no-p 'y-or-n-p)  ; shorten yes/no prompts to y/n

  ;; Change the way backups are done
  (setq make-backup-files nil)
  (setq auto-save-default nil)

  (setq save-interprogram-paste-before-kill t
        apropos-do-all t
        mouse-yank-at-point t
        require-final-newline t
        visible-bell t
        load-prefer-newer t
        ediff-window-setup-function 'ediff-setup-windows-plain
        save-place-file (concat user-emacs-directory "places")
        create-lockfiles nil
        backup-directory-alist `(("." . (concat user-emacs-directory
                                                 "backups"))))
#+end_src

I usually don't want tabs, if I do I can set this buffer-local to
=t=. If I just want one tab then use =C-q= (=quoted-insert=) to insert
as a literal.

#+begin_src emacs-lisp
  (setq-default indent-tabs-mode nil)
#+end_src

Use the "forward" uniquify scheme for buffer disambiguation

#+begin_src emacs-lisp
  (setq uniquify-buffer-name-style 'forward)
#+end_src

* Redefinitions

Evaluate an expression when the system is the defined value

#+begin_src emacs-lisp
  (defmacro with-system (type &rest body)
    "Evaluate BODY if `system-type' equals TYPE."
    (declare (indent defun))
    `(when (eq system-type ',type)
       ,@body))
#+end_src

On  I use ⌘ as =meta= and prefer ⌥ to do nothing so I can still
insert special characters like easily.

#+begin_src emacs-lisp
  (with-system darwin
    (setq mac-command-modifier 'meta
          mac-option-modifier 'super))
#+end_src

Disable passing various commands to the underlying  system:

#+begin_src emacs-lisp
  (with-system darwin
    (setq mac-pass-command-to-system nil))
#+end_src

# Some fancy  composition:
#
#+begin_src emacs-lisp
  ;; (with-system darwin
  ;;   (if (fboundp 'mac-auto-operator-composition-mode)
  ;;       (mac-auto-operator-composition-mode t)))
#+end_src

Start emacs fullscreen

#+begin_src emacs-lisp
  (with-system darwin
    (setq ns-use-native-fullscreen t)
    ;;(set-frame-parameter nil 'fullscreen 'maximized))
    (add-hook 'window-setup-hook 'toggle-frame-fullscreen t))
#+end_src

* Helper functions

Open / visit the configuration file

#+begin_src emacs-lisp
  (defun find-user-init-file ()
    (interactive)
    (find-file "~/.emacs.d/config.org"))
  ;(global-set-key (kbd "C-c e") 'config-visit)
#+end_src

Reload the configuration

#+begin_src emacs-lisp
  (defun load-user-init-file ()
    (interactive)
    (org-babel-load-file (expand-file-name "~/.emacs.d/config.org")))
  ;(global-set-key (kbd "C-c r") 'config-reload)
#+end_src

* Load user custom settings

#+begin_src emacs-lisp
  (setq custom-file "~/.emacs.d/custom-settings.el")
  (load custom-file t)
#+end_src

* Load user secrets

#+begin_src emacs-lisp
  (load "~/.emacs.d/emacs.secrets" t)
#+end_src

* which-key

Which key to show a list of keys that follow a speicific key-chord

#+begin_src emacs-lisp
  (use-package which-key
    :config
    ;; Allow C-h to trigger which-key before it is done automatically
    (setq which-key-show-early-on-C-h t)
    ;; make sure which-key doesn't show normally but refreshes quickly after it is
    ;; triggered.
    (setq which-key-idle-delay 10000)
    (setq which-key-idle-secondary-delay 0.05)
    (which-key-mode 1))
#+end_src

* general.el (Keybinds)

#+begin_src emacs-lisp
  (use-package general
    :after which-key
    :config
    (general-override-mode 1)

    (general-define-key
      "C-c e"   'find-user-init-file
      "C-c r"   'load-user-init-file

      "C-:"     'avy-goto-char-timer
      "C-s"     'swiper-isearch
      "M-x"     'counsel-M-x
      "C-x C-b" 'ibuffer
      "C-x b"   'ivy-switch-buffer
      "C-x C-f" 'counsel-find-file
      )

    (general-define-key
     "C-c p" '(:keymap projectile-command-map :package projectile))
  )
#+end_src

* avy

#+begin_src emacs-lisp
  (use-package avy
    :commands (avy-goto-char-timer))
#+end_src

* counsel

#+begin_src emacs-lisp
    (use-package counsel
      :defer t
      ;:config
      ;(setq counsel-ag-base-command "ag --skip-vcs-ignores --vimgrep %s")
      ;(global-set-key (kbd "M-x") 'counsel-M-x)
      ;(global-set-key (kbd "C-x C-f") 'counsel-find-file)
      ;(global-set-key (kbd "C-c g") 'counsel-git)
      ;(global-set-key (kbd "C-c j") 'counsel-rg)
      ;(global-set-key (kbd "C-c k") 'counsel-git-grep)
      :general
      ("C-c k" 'counsel-rg))
#+end_src

* swiper

Use the ivy enhanced version of =isearch=

#+begin_src emacs-lisp
  (use-package swiper
    :defer t
    :config
    (setq ivy-use-virtual-buffers t)
    (setq enable-recursive-minibuffers t)
                                          ;(global-set-key (kbd "C-c C-r") 'ivy-resume)
                                          ;(global-set-key (kbd "<f6>") 'ivy-resume)
    )
#+end_src

* ivy

Use the ivy completion frontend, and the set of ivy-enhanced emacs commands

#+begin_src emacs-lisp
  (use-package ivy
    :diminish ivy-mode
    :config
    (ivy-mode 1))
#+end_src

* ivy-rich

Make use of the enriched version of ivy commands to display more information about the tasks etc.

#+begin_src emacs-lisp
  (use-package ivy-rich
    :defer t
    :after ivy
    :config
    (ivy-rich-mode 1))
#+end_src

* amx

amx is the evolution of smex which provides commands that have been used previously

#+begin_src emacs-lisp
  (use-package amx
    :after ivy
    :custom
    (amx-backend 'auto)
    (amx-save-file "~/.emacs.d/amx-items")
    (amx-history-length 50)
    (amx-show-key-bindings nil)
    :config
    (amx-mode 1))
#+end_src

* crux
=crux= has useful functions extracted from Emacs Prelude. Set `C-a` to
move to the first non-whitespace character on a line, and then to
toggle between that and the beginning of the line.

#+begin_src emacs-lisp
  (use-package crux
    :general
    ("C-a" 'crux-move-beginning-of-line))
#+end_src

* Delete trailing whitespace

I *never* want whitespace at the end of lines. Remove it on save.

#+begin_src emacs-lisp
 (add-hook 'before-save-hook 'delete-trailing-whitespace)
#+end_src

* PCRE in emacs

Use a plainer syntax for regexp

#+begin_src emacs-lisp
  (use-package pcre2el
    :config
    (pcre-mode))
#+end_src

* COMMENT ls-lisp

#+begin_src emacs-lisp
  (when (eq system-type 'darwin)
    (require 'ls-lisp)
    (setq ls-lisp-use-insert-directory-program nil))
#+end_src

* COMMENT Fonts within emacs

#+begin_src emacs-lisp
;;  (set-face-attribute 'default nil :family "Iosevka" :height 130)
#+end_src

* Shell environment variable import

Adjust shell environment variables, if needed

#+begin_src emacs-lisp
  (use-package exec-path-from-shell
    :if (memq window-system '(mac ns x))
    :config
    (setq exec-path-from-shell-variables '("PATH" "SHELL")) ;;"LANG" "LC_ALL" "LC_TYPE" "SHELL"))
    (setq exec-path-from-shell-arguments '("-l"))
    (exec-path-from-shell-initialize)
    (setenv "LANG" "en_US"))
#+end_src

* COMMENT eshell

Prevent opening up a file using the system =vi= and instead open it

#+begin_src emacs-lisp
  (defun eshell/vi (arg)
    "Any accidental attempts to open files using VI are simply opened using emacs instead"
    (princ "Opening file in emacs buffer")
    (find-file arg))
#+end_src

Add a helper for long running commands with a lot of output that is not friendly to buffers

#+begin_src emacs-lisp
(defun eshell/in-term (prog &rest args)
  "Run shell command in term buffer."
  (switch-to-buffer (apply #'make-term prog prog nil args))
  (term-mode)
  (term-char-mode))
#+end_src


#+begin_src emacs-lisp
(add-hook 'eshell-mode-hook
  (lambda ()
    (define-key eshell-mode-map (kbd "<tab>")
      (lambda () (interactive) (pcomplete-std-complete)))))
#+end_src
* direnv

#+begin_src emacs-lisp
  (use-package direnv
    :config
    (direnv-mode)
    (defun direnv--export (directory)
      "Call direnv for DIRECTORY and return the parsed result."
      (unless direnv--installed
        (setq direnv--installed (direnv--detect)))
      (unless direnv--installed
        (user-error "Could not find the direnv executable. Is exec-path correct?"))
      (let ((environment process-environment)
            (stderr-tempfile (make-temp-file "direnv-stderr"))) ;; call-process needs a file for stderr output
        (unwind-protect
            (with-current-buffer (get-buffer-create direnv--output-buffer-name)
              (erase-buffer)
              (let* ((default-directory directory)
                     (process-environment environment)
                     (exit-code (call-process "direnv" nil `(t ,stderr-tempfile) nil "export" "json"))
                     (json-key-type 'string))
                (prog1
                    (unless (zerop (buffer-size))
                      (goto-char (point-max))
                      (re-search-backward "^{")
                      (json-read-object))
                  (unless (zerop (direnv--file-size stderr-tempfile))
                    (goto-char (point-max))
                    (unless (zerop (buffer-size))
                      (insert "\n\n"))
                    (insert-file-contents stderr-tempfile)))))
          (delete-file stderr-tempfile))))
    )
#+end_src

* disable-mouse

To force the change in usage, just completely disable any sort of
mouse event within Emacs.

#+begin_src emacs-lisp
  (use-package disable-mouse
    :config
    (global-disable-mouse-mode))
#+end_src

* multiple-cursors

Add multiple cursor support.

 #+begin_src emacs-lisp
   (use-package multiple-cursors
      :general
      ("C-S-c C-S-c" 'mc/edit-lines)
      ("C->" 'mc/mark-next-like-this)
      ("C-<" 'mc/mark-prev-like-this)
      ("C-c C-<" 'mc/mark-all-like-this))
 #+end_src

* expand-region

Add expand-region

#+begin_src emacs-lisp
  (use-package expand-region
    :general
    ("C-=" 'er/expand-region)
    ("C-+" 'er/contract-region))
#+end_src

* magit

#+begin_src emacs-lisp
  (use-package magit
    :defer t
    :general
    ("C-x g" 'magit-status)
    :config
    ;; https://github.com/magit/magit/issues/2982#issuecomment-598493683
    (setq magit-git-executable "/usr/local/bin/git")
    (add-hook 'git-commit-setup-hook 'git-commit-turn-on-flyspell))
#+end_src

#+begin_src emacs-lisp
;;  (use-package forge
;;    :after magit)
#+end_src

#+begin_src emacs-lisp
  ;; (use-package magit-todos
  ;;   :after magit
  ;;   :config
  ;;   (setq magit-todos-exclude-globs '("node_modules")))
#+end_src

* COMMENT wgrep

#+begin_src emacs-lisp
  (use-package wgrep)
#+end_src

* ibuffer

Prefer the use of =ibuffer= instead of the default buffer list
#+begin_src emacs-lisp
  (setq ibuffer-saved-filter-groups
        '(("default"
           ("emacs-config" (or (filename . ".emacs.d")
                               (filename . "emacs-config")))
           ("Org" (or (mode . org-mode)
                      (filename . "OrgMode")))
           ("Magit" (name . "magit.*"))
           ("Help" (or (name . ".*Help.*")
                       (name . ".*Apropos.*")
                       (name . ".*info.*"))))))

  (add-hook 'ibuffer-mode-hook
            (lambda ()
              (ibuffer-auto-mode 1)
              (ibuffer-switch-to-saved-filter-groups "default")))

  (setq ibuffer-show-empty-filter-groups nil)

  (setq ibuffer-expert t)
#+end_src

* hydra

#+begin_src emacs-lisp
(use-package hydra)
#+end_src

* ace-window

Faster switching between windows, via =ace-window=
#+begin_src emacs-lisp
  (use-package ace-window
    :general
    ("M-o" 'ace-window)
    :config
    ;;(setq ;;aw-keys '(?a ?s ?d ?f ?j ?k ?l)
    (setq aw-dispatch-alist
          '((?x aw-delete-window " Ace - Delete Window")
            (?m aw-swap-window " Ace - Swap Window")
            (?n aw-flip-window)
            (?v aw-split-window-vert " Ace - Split Vert Window")
            (?h aw-split-window-horz " Ace - Split Horz Window")
            (?i delete-other-windows " Ace - Maximize Window")
            (?o delete-other-windows)
            (?b balance-windows)))

    (when (package-installed-p 'hydra)
      (defhydra hydra-window-size (:color red)
        "Windows size"
        ("h" shrink-window-horizontally "shrink horizontal")
        ("j" shrink-window "shrink vertical")
        ("k" enlarge-window "enlarge vertical")
        ("l" enlarge-window-horizontally "enlarge horizontal"))
      ;; (defhydra hydra-window-frame (:color red)
      ;;   "Frame"
      ;;   ("f" make-frame "new frame")
      ;;   ("x" delete-frame "delete frame"))
      ;; (defhydra hydra-window-scroll (:color red)
      ;;   "Scroll other window"
      ;;   ("n" joe-scroll-other-window "scroll")
      ;;   ("p" joe-scroll-other-window-down "scroll down"))
      (add-to-list 'aw-dispatch-alist '(?w hydra-window-size/body) t)
      ;;(add-to-list 'aw-dispatch-alist '(?o hydra-window-scroll/body) t)
      ;;(add-to-list 'aw-dispatch-alist '(?\; hydra-window-frame/body) t)
      ;;)
      (ace-window-display-mode t))
    )
#+end_src

* popup-kill-ring

Simpler interactions with the kill-ring
#+begin_src emacs-lisp
  (use-package popup-kill-ring
    :general
    ("M-y" 'popup-kill-ring))
#+end_src

* hungry-delete

Automatically delete whitespace in a sensible way with "smart" hungry delete

#+begin_src emacs-lisp
  (use-package hungry-delete
    :config
    (global-hungry-delete-mode))

  ;; (use-package smart-hungry-delete
  ;;   :bind (("<backspace>" . smart-hungry-delete-backward-char)
  ;;          ("C-d" . smart-hungry-delete-forward-char)))
#+end_src

* themes

#+begin_src emacs-lisp
  ;; (use-package modus-vivendi-theme)
  ;;(use-package gruvbox-theme)

  (use-package doom-themes
     :config
     (setq doom-themes-enable-bold t    ; if nil, bold is universally disabled
           doom-themes-enable-italic t  ; if nil, italics is universally disabled

           ;; doom-one specific settings
           ;;doom-one-brighter-modeline nil
           doom-one-brighter-comments t
           )

     ;; Corrects (and improves) org-mode's native fontification.
     (doom-themes-org-config)

     (load-theme 'doom-gruvbox t))
#+end_src

* all-the-icons

#+begin_src emacs-lisp
  (use-package all-the-icons)
#+end_src

* doom-modeline

#+begin_src emacs-lisp
  (use-package doom-modeline
    :init
    (doom-modeline-mode 1)
    (setq doom-modeline-buffer-file-name-style 'relative-from-project)
    ;;(setq doom-modeline-icon nil)
    ;;(setq doom-modeline-major-mode-icon nil)
    ;;(setq doom-modeline-minor-modes t)
    )

    ;;(load-theme 'modus-vivendi t)
    ;;(load-theme 'gruvbox-dark-hard t)
#+end_src

# Improve look and feel of titlebar on Macos. Set =ns-appearance= to
# =dark= for white title text and =nil= for black title text.

#+begin_src emacs-lisp
  ;; (with-system darwin
  ;;   (add-to-list 'default-frame-alist '(ns-transparent-titlebar . t))
  ;;   (add-to-list 'default-frame-alist '(ns-appearance . dark)))
#+end_src

* hl-line-mode

Highlight the current line.

#+begin_src emacs-lisp
(global-hl-line-mode 1)
#+end_src

* dashboard

Display a simple dashboard at startup
#+begin_src emacs-lisp
  (use-package dashboard
    :config
    (dashboard-setup-startup-hook)
    (setq show-week-agenda-p t)
    (setq dashboard-items '((agenda . 10)
                            (projects . 10)
                            (recents . 10)))
    (setq dashboard-set-heading-icons t)
    (setq dashboard-set-file-icons t))
#+end_src

* COMMENT rainbow mode

Inline display of colours

#+begin_src emacs-lisp
  (use-package rainbow-mode
    :init
    (add-hook 'prog-mode-hook 'rainbow-mode))
#+end_src

* COMMENT beacon

# Add a visual inidcator when switching to a different window

#+begin_src emacs-lisp
  ;; (use-package beacon
  ;;   :config
  ;;   (beacon-mode 1))
#+end_src

* hippie-expand

#+begin_src emacs-lisp
  (general-define-key "M-/" 'hippie-expand)

  (setq hippie-expand-try-functions-list
        '(try-expand-dabbrev
          try-expand-dabbrev-all-buffers
          try-expand-dabbrev-from-kill
          try-complete-file-name-partially
          try-complete-file-name
          try-expand-all-abbrevs
          try-expand-list
          try-expand-line
          try-complete-lisp-symbol-partially
          try-complete-lisp-symbol))
#+end_src

* rainbow-delimeters
Some general configuration for development that is agnostic of
language.

Use parens highlighting to make reading the code a little simpler

#+begin_src emacs-lisp
  (use-package rainbow-delimiters
    :config
    (add-hook 'prog-mode-hook 'rainbow-delimiters-mode)
    (add-hook 'TeX-update-style-hook #'rainbow-delimiters-mode)
    (set-face-attribute 'rainbow-delimiters-unmatched-face nil
                        :foreground "red"
                        :inherit 'error
                        :box t))
#+end_src

* company

Completion service using =company-mode=

#+begin_src emacs-lisp
  (use-package company
    :config
    ;;    (setq company-idle-delay 0)
    ;;    (setq company-minimum-prefix-length 3)

    (global-company-mode t))
#+end_src

* flycheck

=Flycheck= to allow for the checking of code

#+begin_src emacs-lisp
  (use-package flycheck
    ;; :diminish flycheck-mode
    :demand t
    :init
    (setq flycheck-check-syntax-automatically '(mode-enabled save)
          flycheck-checker-error-threshold 2000)
    :config
    (mapc (lambda (mode)
            (add-hook mode 'flycheck-mode))
          '(elm-mode-hook
            emacs-lisp-mode-hook
            haskell-mode-hook
            scala-mode-hook
            ))
    (add-hook 'sh-mode-hook
              (lambda ()
                (flycheck-select-checker 'sh-shellcheck)))
    )
#+end_src

* projectile

Project management using projectile

#+begin_src emacs-lisp
  (use-package projectile
    :diminish projectile-mode
    :config
    (setq projectile-indexing-method 'alien)
    (setq projectile-completion-system 'ivy)
    (setq projectile-switch-project-action 'magit-status)
    (setq projectile-git-submodule-command nil) ;; Stupid submodule bullshit
    (add-to-list 'projectile-globally-ignored-files "node_modules")
    (projectile-global-mode))
#+end_src

* ripgrep

#+begin_src emacs-lisp
  ;; (use-package ag)

  ;; (use-package rg
  ;;   :ensure-system-package
  ;;   (rg . ripgrep))
#+end_src

* yasnippet

Snippet support

#+begin_src emacs-lisp
  (use-package yasnippet
    :config
    (use-package yasnippet-snippets)
    (yas-reload-all))
#+end_src

* COMMENT Mark TODO / FIXME items

Highlight TODO / FIXME strings in buffers

# #+begin_src emacs-lisp
#   (use-package fic-mode
#     :hook prog-mode)
# #+end_src

* COMMENT dumb-jump

#+begin_src emacs-lisp
  (use-package dumb-jump
    ;; :bind (("M-g o" . dumb-jump-go-other-window)
    ;;        ("M-g j" . dumb-jump-go)
    ;;        ("M-g x" . dumb-jump-go-prefer-external)
    ;;        ("M-g z" . dumb-jump-go-prefer-external-other-window))
    :init
    (dumb-jump-mode)
    :config
    (setq dumb-jump-selector 'ivy)
    ;; Add some config for elm files
    (nconc dumb-jump-language-file-exts
           '((:language "elm" :ext "elm" :agtype "elm" :rgtype "elm")))
    (nconc dumb-jump-language-comments
           '((:comment "--" :language "elm")))
    (nconc dumb-jump-find-rules
           ;; Rules, based off the haskell syntax
           '((:type "module" :supports ("ag" "rg") :language "elm"
                    :regex "^module\\s+JJJ\\s+"
                    :tests ("model Test exposing (exportA, exportB)"))

             (:type "type" :supports ("ag" "rg" "grep" "git-grep") :language "elm"
                    :regex "^type\\s+JJJ\\b"
                    :tests ("type Test"))
             (:type "type" :supports ("ag" "rg" "grep" "git-grep") :language "elm"
                    :regex "^type\\s+alias\\s+JJJ\\b"
                    :tests ("type alias Test" "type alias Model ="))
             (:type "function" :supports ("ag" "rg" "grep" "git-grep") :language "elm"
                    :regex "^port\\s+JJJ\\b\\s*:[^:]"
                    :tests ("port requestPopup :"))
             (:type "function" :supports ("ag" "rg" "grep" "git-grep") :language "elm"
                    :regex "^\\s*JJJ\\s*:[^:].*->.*"
                    :tests ("foo : Int -> Int"))
             ))
    ;;--regex-Elm=/^ *([[:lower:]][[:alnum:]_]+)[[:blank:]]*:[^:][^-]+$/\1/c,constant,constants/
    )
#+end_src
* Nix and nixpkg

#+begin_src emacs-lisp
  (use-package nix-mode
    :mode "\\.nix\\'")

#+end_src

* COMMENT Terminal

 #+begin_src emacs-lisp
   (defvar my-term-shell "/usr/local/bin/fish")
   (defadvice ansi-term (before force-bash)
     (interactive (list my-term-shell)))
   (ad-activate 'ansi-term)

   ;;(global-set-key (kbd "<M-return>") 'ansi-term)
 #+end_src

* org-mode

#+begin_src emacs-lisp
  (use-package org
    :mode (("\\.org\\'" . org-mode))
    :ensure org-plus-contrib
    :general
    ("C-c l" 'org-store-link)
    ("C-c a" 'org-agenda)
    ("C-C c" 'org-capture))
#+end_src

** org-bullets

Improve the appearance of bullet points in Emacs:

#+begin_src emacs-lisp
  (use-package org-bullets
    :config
    ;;    (setq org-bullets-bullet-list '("∙"))
    (add-hook 'org-mode-hook (lambda () (org-bullets-mode 1))))
#+end_src

** priority colours

Set colours for priorities

#+begin_src emacs-lisp
(setq org-priority-faces '((?A . (:foreground "#F0DFAF" :weight bold))
                           (?B . (:foreground "LightSteelBlue"))
                           (?C . (:foreground "OliveDrab"))))
#+end_src
** Agenda file locations

Define the locations of the different org files:

#+begin_src emacs-lisp
  (setq org-agenda-files (list "~/org/gtd.org"
                               "~/org/projects.org"
                               "~/org/work.org"
                               "~/org/calendar.org"
                               "~/org/call.org"))
#+end_src

Nicer indenting in =org-mode= files

#+begin_src emacs-lisp
  (add-hook 'org-mode-hook 'org-indent-mode)
#+end_src

** COMMENT Alerts

Add =org-alert= to display some alerts on the desktop

#+begin_src emacs-lisp
  (use-package org-alert
    :config
    (with-system darwin
                 (setq alert-default-style 'message))
    (with-system gnu/linux
                 (setq alert-default-style 'libnotify)))

#+end_src

** org-capture templates

#+begin_src emacs-lisp
  (setq org-capture-templates
        '(("t" "Todo" entry
           (file+headline "~/org/gtd.org" "Tasks")
           "* TODO %?\n  %i\n  %a")
          ("p" "Project Todo" entry
           (file+headline "~/org/projects.org" "Tasks")
           "* TODO %?\n  %i\n  %a")
          ("w" "Work Todo" entry
           (file+headline "~/org/work.org" "Tasks")
           "* TODO %?\n  %i\n  %a")
          ("c" "Call someone" entry
           (file+headline "~/org/call.org" "To call")
           "* TODO %?\n  %i\n")
          ))
#+end_src

** COMMENT org-beamer

#+begin_src emacs-lisp
(eval-after-load "ox-latex"

  ;; update the list of LaTeX classes and associated header (encoding, etc.)
  ;; and structure
  '(add-to-list 'org-latex-classes
                `("beamer"
                  ,(concat "\\documentclass[presentation]{beamer}\n"
                           "[DEFAULT-PACKAGES]"
                           "[PACKAGES]"
                           "[EXTRA]\n")
                  ("\\section{%s}" . "\\section*{%s}")
                  ("\\subsection{%s}" . "\\subsection*{%s}")
                  ("\\subsubsection{%s}" . "\\subsubsection*{%s}"))))
#+end_src

** COMMENT org-noter

#+begin_src emacs-lisp
  (use-package org-noter
    :after org
    :config
    (setq org-noter-default-notes-file-names '("notes.org")
          org-noter-separate-notes-from-heading t))
#+end_src

** COMMENT org-roam

#+begin_src emacs-lisp
  (use-package org-roam
    :hook
    (after-init . org-roam-mode)
    :bind (:map org-roam-mode-map
                (("C-c n l" . org-roam)
                 ("C-c n f" . org-roam-find-file)
                 ("C-c n b" . org-roam-switch-to-buffer)
                 ("C-c n g" . org-roam-graph))
                :map org-mode-map
                (("C-c n i" . org-roam-insert)))
    :custom
    (org-roam-directory "~/org/roam/")
    (org-roam-graph-executable "/usr/local/bin/dot"))
#+end_src

Completion with =company-mode=

#+begin_src emacs-lisp
  (use-package company-org-roam
    :config
    (push 'company-org-roam company-backends))
#+end_src

* COMMENT Writing

Upgrade the dictionary used to a more up-to-date, recent version.

#+begin_src emacs-lisp
  (cond
   ;; try hunspell at first
   ;; if hunspell does NOT exist, use aspell
   ((executable-find "hunspell")
    (setq ispell-program-name "hunspell")
    (setq ispell-local-dictionary "en_GB")
    (setq ispell-local-dictionary-alist
          ;; Please note the list `("-d" "en_US")` contains ACTUAL parameters passed to hunspell
          ;; You could use `("-d" "en_US,en_US-med")` to check with multiple dictionaries
          '(("en_US" "[[:alpha:]]" "[^[:alpha:]]" "[']" nil ("-d" "en_US") nil utf-8)
            )))

   ((executable-find "aspell")
    (setq ispell-program-name "aspell")
    ;; Please note ispell-extra-args contains ACTUAL parameters passed to aspell
    (setq ispell-extra-args '("--sug-mode=ultra" "--lang=en_US"))))
#+end_src

=writegood-mode= highlights bad words, weasels etc. Also has functions
to calculate readability of writing.

#+begin_src emacs-lisp
  (use-package writegood-mode
  ;;:bind ("C-c g" . writegood-mode)
    :init
    (add-hook 'TeX-update-style-hook #'writegood-mode)
    :config
    (add-to-list 'writegood-weasel-words "actionable"))
#+end_src

Add =langtool= as an additional tool to use

#+begin_src emacs-lisp
  (use-package langtool
    :config
    (setq langtool-language-tool-jar "/usr/local/Cellar/languagetool/4.3/libexec/languagetool-commandline.jar"))
#+end_src

#+begin_src emacs-lisp
  (use-package writeroom-mode
    :bind (:map writeroom-mode-map
                ("C-s-," . writeroom-decrease-width)
                ("C-s-." . writeroom-increase-width)
                ("C-s-=" . writeroom-adjust-width))
    :config
    (setq writeroom-width 120)
    (advice-add 'text-scale-adjust :after #'visual-fill-column-adjust))

    (add-hook 'LaTeX-mode-hook 'writeroom-mode)
    (add-hook 'LaTeX-mode-hook 'adaptive-wrap-prefix-mode)
    (add-hook 'LaTeX-mode-hook 'visual-line-mode)
#+end_src

** Thesaurus and dictionary

#+begin_src emacs-lisp
  (with-system darwin
    (use-package osx-dictionary
      :bind (("M-\\" . osx-dictionary-search-pointer))))
#+end_src

* COMMENT Language Server (LSP)

#+begin_src emacs-lisp
  (use-package lsp-mode
    :commands lsp lsp-deferred
    :custom
    (lsp-auto-guess-root nil)
    (lsp-prefer-flymake nil)
    ;; :hook (;;(scala-mode . lsp-deferred)
    ;;        (elm-mode . lsp-deferred)
    ;;        )
    )

  (use-package lsp-ui
    :after lsp-mode
    :diminish
    :commands lsp-ui-mode
    :custom-face
    (lsp-ui-doc-background ((t (:background nil))))
    (lsp-ui-doc-header ((t (:inherit (font-lock-string-face italic)))))
    :custom
    (lsp-ui-doc-enable t)
    (lsp-ui-doc-header t)
    (lsp-ui-doc-include-signature t)
    (lsp-ui-doc-position 'top)
    (lsp-ui-doc-border (face-foreground 'default))
    (lsp-ui-sideline-enable nil)
    (lsp-ui-sideline-ignore-duplicate t)
    (lsp-ui-sideline-show-code-actions nil)
    :config
    ;; Use lsp-ui-doc-webkit only in GUI
    (setq lsp-ui-doc-use-webkit t)
    ;; WORKAROUND Hide mode-line of the lsp-ui-imenu buffer
    ;; https://github.com/emacs-lsp/lsp-ui/issues/243
    (defadvice lsp-ui-imenu (after hide-lsp-ui-imenu-mode-line activate)
      (setq mode-line-format nil))
    (defun lsp--send-did-save-p () t))

  (use-package company-lsp
    ;;:commands company-lsp
    :config
    (push 'company-lsp company-backends))

  ;; ;;  (use-package helm-lsp :commands helm-lsp-workspace-symbol)
  ;; ;;  (use-package lsp-treemacs :commands lsp-treemacs-errors-list)
#+end_src

* COMMENT Auto-fill comments
#+begin_src emacs-lisp
  (add-hook 'prog-mode (lambda ()
                         ((auto-fill-mode 1)
                          (setq comment-auto-fill-only-comments t))))
#+end_src
* Javascript and "friends"

Some additional modes for Javascript (rubbish language)

# Highlighting of mustache templates
#
# #+begin_src emacs-lisp
#   (use-package mustache-mode
#     :mode
#     ("\\.mustache\\'" . web-mode))
# #+end_src

# Highlighting for pug/jade templates

# #+begin_src emacs-lisp
#   (use-package pug-mode
#     :mode ("\\.pug\\'" "\\.jade\\'")
#     :config
#     (setq pug-tab-width 4))
# #+end_src

#+begin_src emacs-lisp
  (use-package add-node-modules-path)

  (use-package js2-mode
    :after (add-node-modules-path)
    :interpreter (("node" . js2-mode))
;;    :bind (:map js2-mode-map ("C-c C-p" . js2-print-json-path))
    :mode "\\.\\(js\\|json\\)$"
    :config
    (add-hook 'js-mode-hook 'js2-minor-mode)
    (eval-after-load 'js2-mode '(add-hook 'js2-mode-hook 'add-node-modules-path))
    (flycheck-add-mode 'javascript-eslint 'js2-mode)
    (setq js2-basic-offset 2
          js2-highlight-level 3
          js2-mode-show-parse-errors nil
          js2-mode-show-strict-warnings nil))
#+end_src

#+begin_src emacs-lisp
  (use-package prettier-js
    :after (js2-mode add-node-modules-path)
    :hook (js2-mode . prettier-js-mode))
#+end_src

* Elm

Add =elm-mode= and =flycheck= configuration for editing of elm
buffers.

#+begin_src emacs-lisp
  (use-package flycheck-elm
    :after flycheck
    :hook (flycheck-mode . flycheck-elm-setup))

  (use-package elm-mode
    :mode "\\.elm\\'"
    :init
    (add-to-list 'company-backends 'company-elm)
    :config
    (add-hook 'after-init-hook #'global-flycheck-mode)
    (add-hook 'elm-mode-hook #'elm-format-on-save-mode))
#+end_src

* Haskell

Some _very_ basic Haskell config

#+begin_src emacs-lisp
  (defun fix-imports ()
    "Fixes imports."
    (interactive)
    (sort-lines nil (region-beginning) (region-end))
    (align-regexp (region-beginning) (region-end) "\\(\\s-*\\)#-"))

  (use-package haskell-mode
    :mode "\\.hs\\'")
#+end_src

* Polymode

Define polymode to allow multiple modes in a single buffer. Handy for
=knitr= and friends

#+begin_src emacs-lisp
  (use-package polymode
    :mode
    (("\\.Rnw" . poly-noweb+r-mode)
     ("\\.Rtex" . poly-noweb+r-mode)))
#+end_src

* LaTeX

Setup AUCTex for some nice LaTeX support in emacs. This workflow is
centered around using =latexmk= as the build tool and that the LaTeX
project is version controlled in git.

From the project specific =.latexmkrc= we can then determine relative
pathing for files to correctly allow for the automatic setting of the
=TeX-master= variable, removing the need to spoil the source files
themselves with local config comment strings.

#+begin_src emacs-lisp
  (defun ales/fill-paragraph (&optional P)
    "When called with prefix argument call `fill-paragraph'.
  Otherwise split the current paragraph into one sentence per line.
  Optional argument P Dunno?"
    (interactive "P")
    (if (not P)
	(save-excursion
	  (let ((fill-column 12345678)) ;; relies on dynamic binding
	    (fill-paragraph) ;; this will not work correctly if the paragraph is
			     ;; longer than 12345678 characters (in which case the
			     ;; file must be at least 12MB long. This is unlikely.)
	    (let ((end (save-excursion
			 (forward-paragraph 1)
			 (backward-sentence)
			 (point-marker))))  ;; remember where to stop
	      (beginning-of-line)
	      (while (progn (forward-sentence)
			    (<= (point) (marker-position end)))
		(just-one-space) ;; leaves only one space, point is after it
		(delete-char -1) ;; delete the space
		(newline)        ;; and insert a newline
		(LaTeX-indent-line) ;; I only use this in combination with late, so this makes sense
		))))
      ;; otherwise do ordinary fill paragraph
      (fill-paragraph P)))

  (defun extract-default-files ()
    "Extract latex project main file from the Makefile in a temporary buffer."
    (let* ((default-directory (locate-dominating-file "." "Makefile"))
	   (target-file (concat default-directory "Makefile")))
      (with-temp-buffer
	(insert-file-contents target-file)
	(goto-char (point-min))
	(when (re-search-forward "MAINFILE\s+:=\s+\\(.*\\)\s*")
	  (concat default-directory (match-string 1))))
      ))

  (defun relative-master (path)
    "Relative PATH to the master file using `extract-default-files'.
  Argument PATH the path to determine the relative path from."
    (let ((master-file (extract-default-files)))
      (f-relative master-file (f-dirname path))))

  (defun reload-after-TeX-complete (process msg)
    "Reload any associated PDFView buffers, after compilation succeeds.
  Argument PROCESS The sentinel process.
  Argument MSG The message."
    (TeX-command-sentinel process msg)

    ;; Now update the produced synctex file to cater for the case of
    ;; Sweave/knitr interactions
    (dolist ($buf (buffer-list (current-buffer)))
      (with-current-buffer $buf
	(when (eq (buffer-local-value 'major-mode $buf) 'pdf-view-mode)
	  (message "Reloading PDF: %s" (buffer-name $buf))
	  (pdf-view-revert-buffer :ignore-auto :noconfirm)))))

  (use-package tex-site
    :ensure auctex
    :after (tex latex)
    :defer t
    :mode
    (("\\.tex\\'" . LaTeX-mode))
    :commands (latex-mode LaTeX-mode plain-tex-mode)
    :general
    (LaTeX-mode-map "M-q" 'ales/fill-paragraph)
    :init
    (add-hook 'LaTeX-mode-hook 'LaTeX-preview-setup)
    (add-hook 'LaTeX-mode-hook 'flyspell-mode)
    (add-hook 'LaTeX-mode-hook 'turn-on-reftex)
    (add-hook 'LaTeX-mode-hook 'LaTeX-math-mode)
    (add-hook 'LaTeX-mode-hook 'visual-line-mode)

    ;; to use pdfview with auctex
    (add-hook 'LaTeX-mode-hook 'pdf-tools-install)

    ;; to use pdfview with auctex
    (setq TeX-view-program-selection '((output-pdf "pdf-tools"))
	  TeX-source-correlate-start-server t)
    (setq TeX-view-program-list '(("pdf-tools" "TeX-pdf-tools-sync-view")))

    (add-hook 'LaTeX-mode-hook (lambda ()
				 (setq TeX-master (relative-master (buffer-file-name)))
				 (add-to-list 'TeX-command-list '("Make" "make" TeX-run-TeX nil t))
				 (add-to-list 'TeX-command-list
					      '("custom" "something"
						(lambda (name command file)
						  (message name command file)
						  (let ((TeX-save-query nil)
							(TeX-process-asynchronous t)
							(TeX-error-overview-open-after-TeX-run t)
							(master-file (TeX-master-file))
							(process (TeX-command-menu "Make")))
						    (set-process-sentinel process 'reload-after-TeX-complete)))
						nil t)
					      )
				 ))

    (add-hook 'outline-minor-mode-hook
	      (lambda ()
		(define-key outline-minor-mode-map ["\C-o"] 'outline-cycle)))
    :config
    (setq TeX-auto-save t
	  TeX-parse-self t
	  TeX-save-query nil
	  TeX-command-force "custom"
	  TeX-PDF-mode t
	  reftex-plug-into-AUCTeX t
	  reftex-use-external-file-finders t
	  LaTeX-csquotes-open-quote "\\enquote{"
	  LaTeX-csquotes-close-quote "}"
	  reftex-bibliography-commands '("bibliography" "nobibliography" "addbibresource") ;; Make reftex try play nicer with biblatex
	  reftex-cite-format 'natbib)

    ;; Fancy verbatim config for code blocks in thesis
    (add-to-list 'LaTeX-verbatim-environments "code")
    (add-to-list 'LaTeX-indent-environment-list '("code" current-indentation))

    ;; Spelling
    (setq ispell-tex-skip-alists
	  '((
	     ;;("%\\[" . "%\\]") ; AMStex block comment...
	     ;; All the standard LaTeX keywords from L. Lamport's guide:
	     ;; \cite, \hspace, \hspace*, \hyphenation, \include, \includeonly
	     ;; \input, \label, \nocite, \rule (in ispell - rest included here)
	     ("\\\\addcontentsline"              ispell-tex-arg-end 2)
	     ("\\\\add\\(tocontents\\|vspace\\)" ispell-tex-arg-end)
	     ("\\\\\\([aA]lph\\|arabic\\)"   ispell-tex-arg-end)
	     ("\\\\author"                         ispell-tex-arg-end)
	     ;; New regexps here --- kjh
	     ("\\\\\\(text\\|paren\\)cite" ispell-tex-arg-end)
	     ("\\\\cite\\(t\\|p\\|year\\|yearpar\\)" ispell-tex-arg-end)
	     ("\\\\bibliographystyle"                ispell-tex-arg-end)
	     ("\\\\gls"                ispell-tex-arg-end)
	     ("\\\\cref"               ispell-tex-arg-end)
	     ("\\\\makebox"                  ispell-tex-arg-end 0)
	     ("\\\\e?psfig"                  ispell-tex-arg-end)
	     ("\\\\document\\(class\\|style\\)" .
	      "\\\\begin[ \t\n]*{[ \t\n]*document[ \t\n]*}"))
	    (
	     ;; delimited with \begin.  In ispell: displaymath, eqnarray,
	     ;; eqnarray*, equation, minipage, picture, tabular,
	     ;; tabular* (ispell)
	     ("\\(figure\\|table\\)\\*?"     ispell-tex-arg-end 0)
	     ("\\(equation\\|eqnarray\\)\\*?"     ispell-tex-arg-end 0)
	     ("list"                                 ispell-tex-arg-end 2)
	     ("program" . "\\\\end[ \t\n]*{[ \t\n]*program[ \t\n]*}")
	     ("verbatim\\*?"."\\\\end[ \t\n]*{[ \t\n]*verbatim\\*?[ \t\n]*}")
	     ("lstlisting\\*?"."\\\\end[ \t\n]*{[ \t\n]*lstlisting\\*?[ \t\n]*}"))))
    )
#+end_src

Now add =pdf-tools= for nicer PDF interactions

#+begin_src emacs-lisp
  (use-package pdf-tools
    :defer t
    :magic ("%PDF" . pdf-view-mode)
    :config
    (with-system darwin
      ;; https://github.com/politza/pdf-tools/issues/480#issuecomment-473707355
      (setenv "PKG_CONFIG_PATH" "/usr/local/lib/pkgconfig:/usr/local/Cellar/libffi/3.2.1/lib/pkgconfig"))
    ;; initialise
    (pdf-tools-install)
    ;; open pdfs scaled to fit page
    (setq-default pdf-view-display-size 'fit-page)
    ;; automatically annotate highlights
    (setq pdf-annot-activate-created-annotations t)
    ;; use normal isearch
    (define-key pdf-view-mode-map (kbd "C-s") 'isearch-forward))
#+end_src

* R

#+begin_src emacs-lisp
  (use-package poly-R)
#+end_src

#+begin_src emacs-lisp
  (use-package ess
    :after ess-site)
#+end_src

* Scala

Use =scala-mode= for scala syntax highlighting

#+begin_src emacs-lisp
  (use-package scala-mode
    :mode "\\.s\\(cala\\|bt\\)$")

  (use-package sbt-mode
    :commands sbt-start sbt-command
    :config
    ;; WORKAROUND: https://github.com/ensime/emacs-sbt-mode/issues/31
    ;; allows using SPACE when in the minibuffer
    (substitute-key-definition
     'minibuffer-complete-word
     'self-insert-command
     minibuffer-local-completion-map))
#+end_src

* Terraform

#+begin_src emacs-lisp
  (use-package terraform-mode
    :mode "\\.tf\\'")

  (use-package company-terraform
    :after terraform-mode
    :config
    (company-terraform-init))
#+end_src

* Dhall

#+begin_src emacs-lisp
  (use-package dhall-mode
    :mode ("\\.dhall\\'"))
#+end_src

* YAML

#+begin_src emacs-lisp
  (use-package yaml-mode
    :mode ("\\.y[a?]ml\\'"))

#+end_src

* Ledger

#+begin_src emacs-lisp
  (use-package ledger-mode
    :mode "\\.ledger\\'"
    :config
    (setq ledger-reconcile-default-commodity "R")
    :init
    (setq ledger-clear-whole-transactions 1))
#+end_src

Flycheck-ledger

#+begin_src emacs-lisp
  (use-package flycheck-ledger
    :after flycheck)
#+end_src
